Raven Queries & Indices:
-----------------------------------------------------------------
PRACTICE SETS
-----------------------------------------------------------------
1)Create index: Suppliers with the number of products (how many various products the shop offer by each supplier).

Ans)
--------MAP---------
from prod in docs.Products
let supp = LoadDocument(prod.Supplier, "Suppliers")
select new { 
    SupplierName = supp.Name,
    ProductCount = 1
}
------REDUCE---------
from result in results
group result by result.SupplierName into g
select new { 
    SupplierName = g.Key,
    ProductCount = g.Sum(x => x.ProductCount)
}
--------------------------
Index: Create index: Total number of units sold of each product.

-------------MAP----------
from orders in docs.Orders
from ord_line in orders.Lines
select new {
    ProductName = ord_line.ProductName,
    UnitCount = ord_line.Quantity
}

-----------REDUCE----------
from result in results
group result by result.ProductName into g
select new { 
    ProductName = g.Key,
    UnitCount = g.Sum(x => x.UnitCount)
}
----------------------------------------------------
Create index: Total amount spent by each customer
---------------------------------------------
MAP
------------------------
from orders in docs.Orders
from sub_orders in orders.Lines
select new
{
    OrderId = Id(orders),
    TotalSpend = ((sub_orders.PricePerUnit * sub_orders.Quantity) - ((sub_orders.PricePerUnit * sub_orders.Quantity) * sub_orders.Discount))
}
-----------REDUCE----------
from result in results
group result by result.OrderId into g
select new {
    OrderId = g.Key,
    TotalSpend = g.Sum(x => x.TotalSpend)
}
-----------------------------------------------------------------
-----------------------------------------------------------------
TEST 1
-----------------------------------------------------------------
-----------------------------------------------------------------
PART 1
-----------------------------------------------------------------
Create a query that returns a list of all orders with the name of the Employee who processed the order:

from "Orders"  as ord
load ord.Employee as emp
select {
Employee: emp.FirstName
}
-----------------------------------------------------------------
Create index that will allow to search products by the name of their supplier.
------------------------NOt sure about the answe---------
(For example the index for query:from index '...' where SupplierName == 'Exotic Liquids')
Write the full index syntax.


----------------------------------------------------------------
How many pieces of Filo Mix were sold in total?
----------------------------------------------------------------
from Orders as ord
group by ord.Lines[].ProductName
where ord.Lines[].ProductName == 'Filo Mix'
select count()
----------------------------------------------------------------------------------------------------------------------------------Corrupt DB
Patching query to add new Attribute 
--------------------------------------------------------
from "Mlb_players" 
update {
    this.TeamFullName = "Banana Republic";
}
--------------------------------------------------------
Aggregate
--------------------------------------------------------
Which team has the tallest players on average (team height average)?
--------------------Corrupt DB--------May use generic from other papers----------------------------
Write the answer (team name, average height) + full query/index.
Group by team name and heights : average for each team then limit 1 

from Orders
group by Company
where count() > 5
order by count() desc
select count() as Count, key() as Company
include Company

from Mlb_players as player
group by " \"Team\""
select {
    average_height = player.Avg(" \"Height(inches)\"")
    team_name = player.Name
}

----------------------------------------------------------------
-------------------------TEST 2------------------------------
----------------------------------------------------------------

-Create index that will allow to search orders by the name of the company which made the order.
(For example the index for query:
from index '...' where Company == 'QUICK-Stop')
Write the full index syntax.
Index:
map("Orders", (o) => {
let c = load(o.Company, "Companies")
return {
Name: c.Name,
};
})
Query:
from index "order/ByCompany" where Name == "QUICK-Stop"
--------------------------------------------------------------
from "Employees"  as emp
load emp.ReportsTo as boss
select {
 employee_name : emp.FirstName
 reports_to : boss.FirstName
}
--------------------------------------------------------------
Create a query that returns a list of all orders with the name of the Employee who processed the order (for example orders/11 -
Davolio).
Write the full query.
map("Orders",(p)=>{
let s= load(p.Employee,"Employees")
return{
emp : s.FirstName
};
})
query: from index "orders/emp" where emp =="Nancy"
----------------------------------------------------------
Create index that will allow to search products by the name of their supplier.
(For example the index for query:
from index '...' where SupplierName == 'Exotic Liquids')
Write the full index syntax.
map("Products",(p)=>{
let s= load(p.Supplier,"Suppliers")
return {
product: p.Name,
supplier: s.Name
};
})
-------------------------------------------------------------
Which team has the tallest players on average (team height average)?
Write the answer (team name, average height) + full query/index.
Map:
from i in docs.Mlb_players
select new{
Team= i.Team,
height= i.BodyHeight,
Count=1,
Average_height=0,
}
Reduce:
from r in results
group r by r.Team into g
let height= g.Sum(x => x.height)
let Count= g.Sum(x => x.Count)
select new{
Team= g.Key,
height = height,
Count = Count,
Average_height= height/Count,
}
Query: from index "AvgHeight" order by Average_height desc limit 1
----------------------------------------------------------
Create index that will allow to search products by the name of their category .
(For example the index for query:
from index '...' where CatName == 'Beverages')
Write the full index syntax.
Create Index:
map("Products", (prod)=>{
let cat = load(prod.Category, "Categories")
return {
CategoryName : cat.Name
};
})
Query:
from index 'ProductCategory' where CategoryName = "Beverages"
--------------------------------------------------------------
Create a query that returns a list of all orders with the name of the Employee who processed the order (for example orders/11 -
Davolio).
Write the full query.
map("Orders",(p)=>{
let s= load(p.Employee,"Employees")
return{
emp : s.FirstName
};
})
query: from index "orders/emp" where emp =="Nancy"
-------------------------------------------------------------------------------------------------------------------------------
----------------------MLB Databases to be done----------------------------
--------------------------------------------------------------

